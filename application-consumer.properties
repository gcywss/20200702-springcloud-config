spring.profiles=consumer

# server.port=7082
server.servlet.context-path=/

eureka.client.service-url.defaultZone=http://eureka01:6081/eureka,http://eureka02:6082/eureka,http://eureka03:6083/eureka
# consumer是否需要向eureka中注册自己？不需要
eureka.client.register-with-eureka=false

# ribbon脱离eureka
# 1.禁用ribbon中默认的eureka，让整个consumer都不在使用eureka
# ribbon.eureka.enabled=false
# 2.虽然ribbon已经脱离了eureka，但是仍然要实现负载均衡，必须要让那个ribbon知道provider到底有哪些
# 需要让ribbon知道所有provider的ip以及端口号
# 写法是固定的，这些配置是没有提示的，需要以provider的application.properties中所有配置的spring.appliation的值来进行开头
# book-interface.ribbon.listOfServers=localhost:8081,localhost:8082,localhost:8083
# 但是一旦脱离了eureka之后，ribbon默认的轮询算法就会失效(所以必须要自己指定ribbon的负载均衡策略算法)
# book-interface.ribbon.NFLoadbalancerRuleClassName=com.netflix.loadbalancer.RandomRule